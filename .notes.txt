- Dans SparseCOO#__getkeyindex, comment la lambda est-elle interpretée vu que la signature de bisect_left dans python ne comporte pas de lambda, à mon sens (contrairement à l'implémentation en ligne) ? => la doc affichée automatiquement (et avec Ctrl + clic) dans spider n'est pas de la bonne version de Python. Il y a sans doute moyen d'accéder à la bonne mais le prof sais pas. En attendant, utiliser help() marche :
==========
from bisect import bisect_left

help(bisect_left)
Help on built-in function bisect_left in module _bisect:

bisect_left(a, x, lo=0, hi=None, *, key=None)
    Return the index where to insert item x in list a, assuming a is sorted.
    
    The return value i is such that all e in a[:i] have e < x, and all e in
    a[i:] have e >= x.  So if x already appears in the list, a.insert(i, x) will
    insert just before the leftmost x already there.
    
    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.

 ==========
- Dans ex4.py original, dans SparseCOO#__setitem__, la ligne 222 est atteignable notamment si self.keys[i] != key, mais rien ne prouve que value != 0. Or, on exécute les inserts indifféremment de cela. Est-ce un bug ? => OUI
- Les complexités voulues sont-elles celles de temps ou d'espace ? J'ai supposé en temps. => OUI
- Comment dict.copy() peut-il être O(n) selon https://wiki.python.org/moin/TimeComplexity alors que avec le slide 335, à la 4 ème ligne, dans le while, si copy() fait des insert, et que c'est à chaque fois le même hash, on a du n pour chaque élément donc n^2 vu la fin de la copie. => Probablement car Python se débrouille pour manipuler directement la structure mais le prof réalise qu'il n'a pas indiqué cela dans le cours et que ça pourrait être du n^2 si c'est le slide que je propose qui était utilisé. Mais en effet, le site proposé est une bonne manière d'aborder le problème dans ce cas.